---
title: |
   | Variables Categ칩ricas  
author: 
  - name: Alan R. V치zquez
    affiliations:
      - name: Departamento de Ingenier칤a Industrial
format: 
  revealjs:
    chalkboard: true
    multiplex: true
    footer: "Tecnol칩gico de Monterrey"
    logo: IN2039_logo.png
    css: style.css
    slide-number: True
revealjs-plugins:
  - pointer    
editor: visual
---

## Agenda

[*Enfocarnos en 1 variable categ칩rica.*]{style="color:darkgreen;"}

<br/>

1.  Introducci칩n

2.  Res칰menes estad칤sticos

3.  Gr치fica de barras

4.  Transformando variables categ칩ricas

5.  Actividad: Gr치fica circular

## Primero lo primero

Hoy usaremos R para construir gr치ficas y tablas. Para esto, usaremos las librer칤as que ya vimos antes como `readxl`, `ggplot2`, `ggformula`, y `dplyr`.

<br/>

Cargu칠moslas en R antes de comenzar.

```{r}
#| echo: true
#| output: false

# Nos se te olvide instalar la librer칤a "ggformula" en Google Colab.
# install.packages(ggformula)
library(readxl)
library(ggplot2)
library(ggformula)
library(dplyr)
```

## Penguins Dataset

Ilustraremos los conceptos de hoy usando el conjunto de datos `penguins.xlsx`.

::: columns
::: {.column width="68%"}
S칰belo a Google Colab y c치rgalo en R usando el siguiente c칩digo.

```{r}
#| output: false
#| echo: true
#| code-overflow: wrap

penguins_data = read_excel("penguins.xlsx")
```
:::

::: {.column width="32%"}
![](images/clipboard-1776523589.png){fig-align="right" width="561"}
:::
:::

En Google Colab, el archivo debe de estar en la carpeta llamada "content" o "contenido."

## 

Hoy nos enfocaremos en visualizar las variables categ칩ricas: `species`, `island` y `sex`.

```{r}
#| output: true
#| echo: true

penguins_data %>% 
  select(species, island, sex) %>%
  head()
```

## Aseg칰rate que R sabe que la variable es categ칩rica

A pesar de que la variables `species`, `island` y `sex` son claramente categ칩ricas, R no reconoce esto.

Por default, R determina que esas variables son car치cter o `chr` porque est치n compuestas por texto.

> En R, las variables categ칩ricas se conocen como `factor` o `fct`.

## Definiendo variables categ칩ricas en R

Para asegurarnos que R sepa que la variable es categ칩rica o `fct`, usamos la funci칩n `mutate_at()` de `dplyr`:

</br>

```{r}
#| echo: true
#| output: true

penguins_data = penguins_data %>% 
  mutate_at(c("species", "island", "sex"), as.factor)
```

</br>

Nota que acabamos de reemplazar el objeto `penguins_data` con la nueva versi칩n.

## 

Ahora, las etiquetas de las variables son `fct`.

```{r}
#| echo: true
#| output: true

penguins_data %>% 
  mutate_at(c("species", "island", "sex"), as.factor) %>% 
  select(species, island, sex) %>% 
  head()

```

# Res칰menes Estad칤sticos

## Res칰menes Estad칤sticos

. . .

> Un **resumen estad칤stico** nos ayuda a resumir un conjunto de observaciones de una manera simple.

. . .

Los res칰menes estad칤sticos m치s utilizados para datos categ칩ricos son:

-   La [**frecuencia**]{style="color:darkblue;"} de una categor칤a es el n칰mero de observaciones que pertenecen a esa categor칤a.

-   La [**frecuencia relativa**]{style="color:darkblue;"} es la frecuencia dividida por el n칰mero total de observaciones.

## Tabla de Frecuencia

Resume una variable categ칩rica contando los valores por categor칤a.

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| output: true
#| code-overflow: wrap

penguins_data %>% 
  group_by(species) %>% 
  summarise("Frecuencia" = n())
```
:::

::: {.column width="50%"}
| **Especie** | **Frecuencia** |
|-------------|----------------|
| Adelie      | 152            |
| Chinstrap   | 68             |
| Gentoo      | 124            |
| **Total**   | **344**        |
:::
:::

-   **Frecuencia**: N칰mero de observaciones en cada categor칤a.

-   **Total**: Suma total de observaciones.

::: notes
1.  Ventajas de las frequencias.

2.  Resumen claro y conciso de los datos categ칩ricos.

3.  Facilita la identificaci칩n de patrones y tendencias.

4.  Ayuda en la toma de decisiones informadas.
:::

## 

```{r}
#| fig-pos: center
#| echo: true
#| output: false

penguins_data %>% 
  group_by(species) %>% 
  summarise("Frecuencia" = n())
```

</br>

El c칩digo se lee:

> Del objeto `penguins_data`, agrupa los datos por la variable `species`, y resume los datos usando el el n칰mero de elementos por categor칤a (`n()`).

## Tabla de Frecuencia Relativa

Resume una variable categ칩rica calculando la *proporci칩n de valores* por categor칤a.

::: columns
::: {.column width="55%"}
```{r}
#| echo: true
#| output: true
#| code-overflow: wrap

penguins_data %>% 
  group_by(species) %>% 
  summarise("Frecuencia" = n()) %>%
  mutate("Freq.Rel" = 
           Frecuencia/sum(Frecuencia))
```
:::

::: {.column width="45%"}
| **Especie** | **Frecuencia relativa** |
|-------------|-------------------------|
| Adelie      | 0.4418605               |
| Chinstrap   | 0.1976744               |
| Gentoo      | 0.3604651               |
| **Suma**    | **1**                   |
:::
:::

-   **Frecuencia relativa**: N칰mero de observaciones en cada categor칤a dividida por el total.

::: notes
La ventaja de la frequencia relativa es que se puede interpretar como una probabilidad. Lo que da mas informaci칩n.
:::

# Gr치fica de barras

## Gr치fica de Barras

> Representa visualmente una tabla de frecuencias o frecuencias relativas.

La frecuencia (o frecuencia relativa) se representa por una barra de altura proporcional.

. . .

Puedes construir una gr치fica de barras usando la funci칩n `gf_bar()` as칤:

```{r}
#| echo: true
#| output: true
#| fig-align: center
#| code-overflow: wrap
#| output-location: slide

gf_bar( ~ species, data = penguins_data)
```

## 

Si quieres graficar la frecuencia relativa, usa la funci칩n `gf_percents`.

```{r}
#| echo: true
#| output: true
#| fig-align: center
#| code-overflow: wrap

gf_percents( ~ species, data = penguins_data)
```

## Ejemplo: Mejorando la gr치fica

Usando las herramientas para gr치ficos en ggplot, podemos mejorar el c칩digo anterior para que la gr치fica se vea as칤.

```{r}
#| echo: false
#| output: true
#| code-fold: true
#| fig-height: 4
#| fig-align: center

gf_percents( ~ species, data = penguins_data, fill = ~species) + labs(title = "Proporciones de ping칲inos", subtitle = "Distribuci칩n ping칲inos en Adelie, Chinstrap, and Gentoo", x = "Tipo de especie", y = "Frecuencia relativa", fill = "Especie") + theme_minimal()

```

# Transformando variables categ칩ricas

## Aplica el Principio 3

> *Aplica los principios del dise침o gr치fico.*

. . .

Podemos mejorar gr치ficas de variables categ칩ricas usando estas t칠cnicas:

::: incremental
-   Re-etiquetar las categor칤as para que sean m치s informativas.

-   Re-ordenar las categor칤as para que sigan su orden natural.

-   Colapsar categor칤as para simplificar la gr치fica.
:::

## Ejemplo: Boston Housing Dataset

Este conjunto de datos contiene informaci칩n recopilada por el Servicio del Censo de EE. UU. sobre viviendas en el 치rea de Boston, Massachusetts.

::: columns
::: {.column width="60%"}
![](images/boston_dataset.png)
:::

::: {.column width="40%"}
![](images/clipboard-3653087831.png)
:::
:::

## 

Los datos est치n en el archivo `Boston_dataset.xlsx`. S칰belos a Google Colab y c치rgalos en R usando el siguiente comando.

```{r}
#| echo: true
#| output: true

Boston_dataset = read_excel("Boston_dataset.xlsx")
Boston_dataset %>% head()
```

Nos concentraremos en las siguientes variables

-   `chas` : Si la casa limita con el r칤o Charles (1: Si y 0: No)

-   `rad` : Indice de accesibilidad a carreteras radiales (`Low`, `Medium`, `High`).

## Recuerda...

Aseg칰rate de que R sabe que esas variables son categ칩ricas.

```{r}
#| echo: true
#| output: true

Boston_dataset = Boston_dataset %>% 
  mutate_at(c("chas", "rad"), as.factor)
Boston_dataset %>% select(chas, rad) %>% head()
```

## Gr치fica inicial

Vamos a construir una gr치fica de barras de `chas`.

```{r}
#| echo: true
#| output: true
#| fig-pos: center

gf_percents( ~ chas, data = Boston_dataset)
```

Sin embargo, las categor칤as en la gr치fica no son informativas.

## Re-etiquetado categor칤as

Lo mejor es re-nombrar las categor칤as de la variable `chas` para que la gr치fica de barras de mas informaci칩n al usuario.

1.  Verifica los nombres de las categor칤as en la variable usando la funci칩n `unique()`.

    ```{r}
    #| echo: true
    #| output: true

    Boston_dataset %>% select(chas) %>% unique()
    ```

## 

2.  Re-emplaza por nombres apropiados usando las funciones `mutate()` y `case_match()`.

    ```{r}
    #| echo: true
    #| output: true

    Boston_dataset = Boston_dataset %>% 
      mutate(chas = case_match(chas, "0" ~ "No", "1" ~ "Si"))
    Boston_dataset %>% head()
    ```

## Veamos que sucede ahora.

```{r}
#| echo: true
#| output: true
#| fig-pos: center 

gf_percents( ~ chas, data = Boston_dataset)
```

Mucho mejor 游땎

## Re-ordenar categor칤as

Ahora, construyamos una gr치fica de barras de `rad`.

```{r}
#| echo: true
#| output: true
#| fig-pos: center 

gf_percents( ~ rad, data = Boston_dataset)
```

Las categor칤as no siguen un orden natural de izquierda a derecha: `Low`, `Medium`, y `High`.

## 

Para tener el orden de las categor칤as deseado, debemos de ser m치s expl칤citos al momento de definir la variable categ칩rica en R.

```{r}
#| echo: true
#| output: true
#| fig-pos: center

Boston_dataset = Boston_dataset %>% 
      mutate(rad = factor(rad, levels = c("Low", "Medium", "High")))
gf_percents( ~ rad, data = Boston_dataset)
```

Mucho mejor 游땎

## Guardando gr치ficas en ggplot2

Para guardar una gr치fica de ggplot2, primero guardamos la gr치fica en un objeto de R.

```{r}
#| echo: true
#| output: true

mi_grafica_de_barras = gf_percents( ~ rad, data = Boston_dataset)
```

Luego, usamos la funci칩n `ggsave()`.

```{r}
#| echo: true
#| output: true
#| fig-pos: center

ggsave(filename = "Mi_grafica.jpg", plot = mi_grafica_de_barras, 
       width = NA, height = NA, units = "cm", dpi = 300)
```

Algunos de los argumentos arriba son:

-   `width`: ancho del gr치fico.
-   `height`: altura del gr치fico.
-   `units`: unidades de medici칩n.
-   `dpi`: resoluci칩n del gr치fico.

# Gr치fica circular

## Gr치fica circular o de pastel

::: columns
::: {.column width="50%"}
::: incremental
-   Se construye dividiendo un c칤rculo en varias porciones que representan las categor칤as de la variable.

-   El di치metro del c칤rculo comprendido por una categor칤a es su frecuencia relativa.

-   Permite dar un vistazo r치pido a las proporciones de cada categor칤a.
:::
:::

::: {.column width="50%"}
![](images/clipboard-800609446.png)
:::
:::

::: notes
Pie charts versus bar charts.

**Bar charts can serve as a good way to show comparisons between categories**. It is generally observed that new trends tend to shy away from using pie charts, as it is difficult for the human eye to judge the exact angle that shows the value of a category in a pie chart.
:::

## Actividad (*solo* mode)

[Preguntale a ChatGPT]{style="color:darkgreen;"}

1.  Ve ChatGPT en <https://chat.openai.com/>
2.  Pidele a ChatGPT que te muestre como generar una gr치fica de circular (o de *pastel*) usando **ggplot2** o **plotly** en R.
3.  Adapta tu c칩digo para producir una gr치fica circular de la variable `island` en `penguin_data`.
